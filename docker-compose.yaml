version: '3'
services:
  mongodb:
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_DATABASE: my_mongo
    volumes:
      - ./data/mongodb:/data/db
    networks:
      - net

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
    networks:
      - net

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    environment:
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
    networks:
      - net

  postgres:
    image: postgres:latest
    environment:
      POSTGRES_DB: trips_history
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    healthcheck:
      test: "pg_isready -d $$POSTGRES_DB -U $$POSTGRES_USER"
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - net

  client:
    build:
      context: client
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    restart: on-failure
    depends_on:
      - kafka
      - mongodb
    networks:
      - net

  offering:
    build:
      context: offering
      dockerfile: Dockerfile
    ports:
      - "8000:8080"
    networks:
      - net

  trip:
    build:
      context: trip
      dockerfile: Dockerfile
    restart: on-failure
    networks:
      - net
    depends_on:
      kafka:
        condition: service_started
      offering:
        condition: service_started
      postgres:
        condition: service_healthy

  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "14268:14268"
      - "16686:16686"
    environment:
      - SPAN_STORAGE_TYPE=memory
    networks:
      - net

networks:
  net: